for(ws in mpg_split){
write_csv(ws, paste0(names(mpg_split)[ws_counter],'.csv'))
ws_counter <- ws_counter + 1}
mpg %>%
nest(-origin) %>%
pwalk(~write_csv(x = .y, path = paste0(.x, ".csv") ) )
library(gapminder)
install.packages('gapminder')
library(gapminder)
gapminder %>%
nest(-country) %>%
pwalk(~write_csv(x = .y, path = paste0(.x, ".csv") ) )
mpg %>%
nest(-origin) %>%
pwalk(~write_csv(x = .y, path = paste0(.x, ".csv") ) )
?pwalk
?nest
?pwalk
options(width=80)
library(psych)
library(Ecdat)
describe(Housing)
library(psych)
library(Ecdat)
describe(Housing)
library(tidyverse)
?tidyr
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk,treadssk,schidkn)
star_selected <- select(star, tmathssk,treadssk,schidkn)
head(star_selected)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score, months of experience
mutate(star, score_ttl = tmathssk+treadssk, months_exp = totexpk*12)
# Rename tmathssk and treadssk as
# math_score and reading_score, respectively
rename(star, math_score=tmathssk, reading_score=treadssk)
# Sort
arrange(star, classk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
?summarise
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
districts <- read_csv('datasets/star/districts.csv')
head(districts)
# Left outer join star on districts
left_join(star, districts)
# Get the average reading score
# by class type, sorted high to low
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star_avg_reading_sorted <- arrange(star_avg_reading, desc(avg_reading))
star_avg_reading_sorted
# Piping %>%
# Get the average reading score
# by class type, sorted high to low
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
# Average math and reading score
# for each school district
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
setwd("~/GitHub/advancing-into-analytics-book")
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk,treadssk,schidkn)
star_selected <- select(star, tmathssk,treadssk,schidkn)
head(star_selected)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score, months of experience
mutate(star, score_ttl = tmathssk+treadssk, months_exp = totexpk*12)
# Rename tmathssk and treadssk as
# math_score and reading_score, respectively
rename(star, math_score=tmathssk, reading_score=treadssk)
# Sort
arrange(star, classk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
?summarise
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
districts <- read_csv('datasets/star/districts.csv')
head(districts)
# Left outer join star on districts
left_join(star, districts)
# Get the average reading score
# by class type, sorted high to low
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star_avg_reading_sorted <- arrange(star_avg_reading, desc(avg_reading))
star_avg_reading_sorted
# Piping %>%
# Get the average reading score
# by class type, sorted high to low
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
# Average math and reading score
# for each school district
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
star
star <- select(star, c('schidkn', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
# Set up
star_pivot <- star %>%
select(c(schidkn, treadssk, tmathssh)) %>%
mutate(id = row_number())
star_pivot <- star %>%
select(c(schidkn, treadssk, tmathssh)) %>%
mutate(id = row_number())
# Set up
star_pivot <- star %>%
select(c(schidkn, treadssk, tmathssk)) %>%
mutate(id = row_number())
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
names_to = test_type, values_to = score)
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
names_to = 'test_type', values_to = 'score')
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
names_to = 'test_type', values_to = 'score')
head(star_long)
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
names_to = 'test_type', values_to = 'score')
head(star_long)
star_long <- star_long %>%
mutate(test_type = recode(test_type,
tmathssk = 'math', treadssk = reading))
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
star_wide <- star_long %>%
pivot_wider(names_from = 'test_type', values_from = 'score')
head(star_wide)
star_wide <- star_long %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-id)
head(star_wide)
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
values_to = 'score', names_to = 'test_type')
head(star_long)
?row_number()
# Rename tmathssk and treadssk as math and reading
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
head(star_long)
star_wide <- star_long %>%
pivot_wider(values_from = 'score', names_from = 'test_type')
head(star_wide)
distinct(star_long, test_type)
# Rename tmathssk and treadssk as math and reading
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
distinct(star_long, test_type)
library(tidymodels)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
library(tidymodels)
mpg_split <- initial_split(mpg)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
table(mpg$origin)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
# Histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg,aes(x = origin,y = mpg)) +
geom_boxplot()
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_grid(~ origin)
# Is there a difference in mileage?
mpg_filtered <- filter(mpg, origin == 'USA' | origin == 'Europe')
# Dependent variable ~ independent variable
t.test(mpg ~ origin, data = mpg_filtered)
select(mpg, mpg:horsepower) %>%
cor()
select(mpg, mpg:horsepower) %>%
pairs()
# Scatterplot
ggplot(data=mpg, aes(x=weight,y=mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage")
# Fit the regression, print the summary results
mpg_regression <- lm(mpg ~ weight, data=mpg)
summary(mpg_regression)
# Scatterplot with fit linear regression line
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
dim(mpg_test)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
?linear_reg
lm_spec
lm_spec <- linear_reg()
lm_spec
fit(mpg ~ weight, data = mpg_train)
?fit
lm_spec <- linear_reg()
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
lm_fit
glance(lm_fit)
lm_fit
glance(lm_fit)
lm_fit %>% predict(new_data = mpg_test)
?fit
lm_fit %>%
predict(new_data = mpg_test) %>%
glance()
lm_fit %>%
predict(new_data = mpg_test) %>%
glance()
?predict
lm_fit %>%
predict(new_data = mpg_test) %>%
metrics()
lm_fit %>%
predict(new_data = mpg_test) %>%
metrics()
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test)
metrics(mpg_pred)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test)
metrics(mpg_pred)
mpg_pred <- predict(lm_fit, new_data = mpg_test)
metrics(mpg_pred)
coef(mpg_pred)
mpg_pred <- predict(lm_fit, new_data = mpg_test)
coef(mpg_pred)
coefficients(mpg_pred)
rsq(mpg_pred)_
rsq(mpg_pred)
rsq(mpg_pred)
mpg_pred
rsq(lm_fit)
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
rsq(lm_fit)
coef(lm_fit)
lm_fit
mpg_pred <- predict(lm_fit, new_data = mpg_test)
rsq(mpg_pred)
mpg_pred <- predict(lm_fit, new_data = mpg_test)
rsq(mpg_pred)
mpg_pred <- lm_fit %>%
rsq(new_data = mpg_test)
mpg_pred <- lm_fit %>%
rsq(new_data = mpg_test)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
rsq()
?predict
# Load libraries
library(tidyverse)
library(tidymodels)
library(vip) # for variable importance
# Load data sets
advertising <- read_rds(url('https://gmudatamining.com/data/advertising.rds'))
home_sales <- read_rds(url('https://gmudatamining.com/data/home_sales.rds')) %>%
select(-selling_date)
set.seed(314)
# Create a split object
advertising_split <- initial_split(advertising, prop = 0.75,
strata = Sales)
# Build training data set
advertising_training <- advertising_split %>%
training()
# Build testing data set
advertising_test <- advertising_split %>%
testing()
lm_model <- linear_reg() %>%
set_engine('lm') %>% # adds lm implementation of linear regression
set_mode('regression')
# View object properties
lm_model
lm_fit <- lm_model %>%
fit(Sales ~ ., data = advertising_training)
# View lm_fit properties
lm_fit
names(lm_fit)
summary(lm_fit$fit)
tidy(lm_fit)
predict(lm_fit, new_data = advertising_test)
advertising_test_results <- predict(lm_fit, new_data = advertising_test) %>%
bind_cols(advertising_test)
# View results
advertising_test_results
# R2 on test set
rsq(advertising_test_results,
truth = Sales,
estimate = .pred)
mpg_results <- predict(lm_fit, new_data = mpg_test) %>%
bind_cols(mpg_test)
library(tidymodels)
library(tidyverse)
mpg <- read_csv('../datasets/mpg/mpg.csv')
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
lm_spec <- linear_reg()
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_results <- predict(lm_fit, new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(mpg_results, truth = mpg, estimate = .pred)
summary(lm(mpg ~ weight, data = mpg))
rsq(mpg_results, truth = mpg, estimate = .pred)
coef(mpg_results)
?rsq
tidy(lm_fdit)
tidy(lm_fit)
glance(lm_fit)
?glance
tidy(lm_fit)
glance(lm_fit)
mpg_results()
mpg_results
rsq(mpg_results, truth = mpg, estimate = .pred)
rmse(mpg_filtered, truth = mpg, estimate = .pred)
rmse(mpg_filtered, truth = mpg, estimate = .pred)
rmse(mpg_results, truth = mpg, estimate = .pred)
rsq(mpg_results, truth = mpg, estimate = .pred)
rmse(mpg_results, truth = mpg, estimate = .pred)
mpg_results <- predict(lm_fit, new_data = mpg_test) %>%
bind_cols(mpg_test)
mpg_results
rsq(data = mpg_results, truth = mpg, estimate = .pred)
rsq(data = mpg_results, truth = mpg, estimate = .pred)
rmse(data = mpg_results, truth = mpg, estimate = .pred)
rsq(data = mpg_results, truth = mpg, estimate = .pred)
roster <- data.frame(
name = c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny'),
height = c(72, 65, 68, 69, 66),
injured = c(FALSE, TRUE, FALSE, FALSE, TRUE))
roster
# Second through fourth rows, first through third columns
roster[2:4, 1:3]
# Second and third rows only
roster[2:3,]
# For summary statistics
library(psych)
# For reading in Excel files
library(readxl)
# For importing and exploring data
library(tidyverse)
# For writing data to Excel
library(writexl)
my_number <- 8.2
sqrt(my_number)
my_number <- 8.2
sqrt(my_number)
my_char <- 'Hello, world'
toupper(my_char)
is.vector(my_number)
length(my_number)
my_numbers <- c(5, 8, 2, 7)
is.vector(my_numbers)
str(my_numbers)
sqrt(my_numbers)
roster_names <- c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny')
toupper(roster_names)
my_vec <- c('A', 2, 'C')
my_vec
# Get third element of roster_names vector
roster_names[3]
# Get first through third elements
roster_names[1:3]
# Get second through last elements
roster_names[2:length(roster_names)]
# Get second and fifth elements
roster_names[c(2, 5)]
roster <- data.frame(
name = c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny'),
height = c(72, 65, 68, 69, 66),
injured = c(FALSE, TRUE, FALSE, FALSE, TRUE))
roster
data()
head(iris)
is.data.frame(iris)
str(iris)
data(package = 'psych')
data('sat.act')
str(sat.act)
getwd()
file.exists('test-file.csv')
file.exists('test-folder/test-file.csv')
file.exists('../test-file.csv')
read_csv('datasets/star/districts.csv')
districts <- read_csv("datasets/star/districts.csv")
districts
star <- read_xlsx("datasets/star/star.xlsx")
View(star)
glimpse(star)
summary(star)
describe(star)
# Third row, second column of data frame
roster[3, 2]
# Second through fourth rows, first through third columns
roster[2:4, 1:3]
# Second and third rows only
roster[2:3,]
# First and third columns only
roster[, c(1,3)]
roster$height_in
# Write roster data frame to csv
write_csv(roster, 'output/roster-output.csv')
# Write roster data frame to csv
write_xlsx(roster, 'output/roster-output.xlsx')
head(star)
roster$height_in
roster$height
is.vector(roster$height)
