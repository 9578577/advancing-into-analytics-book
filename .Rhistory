# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
mpg %>%
count(origin)
?count
# One-way frequency table of origin
mpg %>%
count(origin)
mpg %>%
count(origin, cylinders)
mpg %>%
count(origin, cylinders) %>%
pivot_wider(values_from = n, names_from = cylinders)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
mpg %>%
count(origin, cylinders) %>%
pivot_wider(values_from = n, names_from = cylinders)
library(tidyverse)
library(readxl)
library(writexl)
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
divisions <- read_csv('../datasets/census/census-divisions.csv')
glimpse(divisions)
# 0. Merge the datasets first
census <- left_join(census, divisions)
head(census)
# 1. Sort the data by region ascending, division ascending and population descending.
# (You will need to combine datasets to do this.)
# Write the results to an Excel worksheet.
census %>%
arrange(region, division, desc(population)) %>%
write_xlsx("../datasets/census/solutions-data/census-sorted.xlsx")
# 2. Drop the postal_code field from your merged dataset.
census <- select(census, -postal_code)
head(census)
# 3. Create a new column _density_ which is a calculation
# of population divided by land area.
census <- mutate(census, density = population/land_area)
head(census)
# 4. Visualize the relationship between land area and population
# for all observations in 2015.
census_2015 <- filter(census, year == 2015)
ggplot(data = census_2015, aes(x = land_area, y = population))+
geom_point()
?apply
?sapply
?lapply
?apply
?map
library(tidyverse)
?map
#install.packages('DAAG')
library(DAAG)
library(tidyverse)
#install.packages('tidymodels')
library(tidymodels)
head(ais)
# 1. Visualize rcc by sex
ggplot(data = ais, aes(x = sex, y = rcc))+
geom_boxplot()
ggplot(data = ais, aes(x = rcc))+
geom_histogram()+
facet_grid(~ sex)
# 2. Significant difference in red blood cell count?
t.test(rcc ~ sex, data=ais)
# Yes, there is a significant difference in red blood cell counts
# 3. Correlation matrix of relevant variables:
ais %>%
select(-c(sex, sport)) %>%
cor()
# Lots of these to plot; you may
# want to pick just the ones of interest
ais %>%
select(-c(sex, sport)) %>%
pairs()
# 4. Visualize relationship of height on weight:
ggplot(data = ais, aes(x = ht,y = wt))+
geom_point()
# 5. Linear regression of height on weight:
ais_reg <- lm(wt ~ ht, data = ais)
summary(ais_reg)
PlantGrowth
library(tidyverse)
write_csv(PlantGrowth, "C:/RFiles/plantgrowth.csv")
library(Ecdat)
write.csv(Housing, "C:/RFiles/housing.csv")
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk, treadssk, schidkn)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score
star <- mutate(star, new_column = tmathssk + treadssk)
head(star)
# Rename
star <- rename(star, ttl_score = new_column)
head(star)
# Sort
arrange(star, classk, treadssk)
arrange(star, desc(classk), treadssk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
districts <- read_csv('datasets/star/districts.csv')
head(districts)
# Left outer join star on districts
left_join(select(star, schidkn, tmathssk, treadssk), districts)
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star_avg_reading_sorted <- arrange(star_avg_reading, desc(avg_reading))
star_avg_reading_sorted
# Piping %>%
# Get the average reading score
# by class type, sorted high to low
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
# Average math and reading score
# for each school district
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
# Set up
star_pivot <- star %>%
select(c(schidkn, treadssk, tmathssk)) %>%
mutate(id = row_number())
star_long <- star_pivot %>%
pivot_longer(cols = c(tmathssk, treadssk),
values_to = 'score', names_to = 'test_type')
head(star_long)
# Rename tmathssk and treadssk as math and reading
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
distinct(star_long, test_type)
star_wide <- star_long %>%
pivot_wider(values_from = 'score', names_from = 'test_type')
head(star_wide)
# Count plot
ggplot(data = star,
aes(x = classk))+
geom_bar()
# Histogram
ggplot(data = star,aes(x = treadssk))+
geom_histogram()
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'blue')
# Boxplot
ggplot(data = star,aes(x = treadssk))+
geom_boxplot()
# "Flipped" boxplot
ggplot(data = star, aes(y = treadssk))+
geom_boxplot()
# Grouped boxplot
ggplot(data = star, aes(x = classk,y = treadssk))+
geom_boxplot()
# Scatterplot
ggplot(data=star,aes(x = tmathssk,y = treadssk))+
geom_point()
# Scatterplot with custom axis labels and title
ggplot(data=star,aes(x=tmathssk,y=treadssk))+
geom_point() +
xlab('Math score') + ylab('Reading score')+
ggtitle('Math score versus reading score')
