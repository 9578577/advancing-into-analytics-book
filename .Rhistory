table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
# Histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg,aes(x = origin,y = mpg)) +
geom_boxplot()
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_grid(~ origin)
# Is there a difference in mileage?
mpg_filtered <- filter(mpg, origin == 'USA' | origin == 'Europe')
# Dependent variable ~ independent variable
t.test(mpg ~ origin, data = mpg_filtered)
select(mpg, mpg:horsepower) %>%
cor()
select(mpg, mpg:horsepower) %>%
pairs()
# Scatterplot
ggplot(data=mpg, aes(x=weight,y=mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage")
# Fit the regression, print the summary results
mpg_regression <- lm(mpg ~ weight, data=mpg)
summary(mpg_regression)
# Scatterplot with fit linear regression line
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
table(mpg$origin)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
# Histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg,aes(x = origin,y = mpg)) +
geom_boxplot()
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_grid(~ origin)
# Is there a difference in mileage?
mpg_filtered <- filter(mpg, origin == 'USA' | origin == 'Europe')
# Dependent variable ~ independent variable
t.test(mpg ~ origin, data = mpg_filtered)
select(mpg, mpg:horsepower) %>%
cor()
select(mpg, mpg:horsepower) %>%
pairs()
# Scatterplot
ggplot(data=mpg, aes(x=weight,y=mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage")
# Fit the regression, print the summary results
mpg_regression <- lm(mpg ~ weight, data=mpg)
summary(mpg_regression)
# Scatterplot with fit linear regression line
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
setwd("~/GitHub/advancing-into-analytics-book")
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
table(mpg$origin)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
# Histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg,aes(x = origin,y = mpg)) +
geom_boxplot()
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_grid(~ origin)
# Is there a difference in mileage?
mpg_filtered <- filter(mpg, origin == 'USA' | origin == 'Europe')
# Dependent variable ~ independent variable
t.test(mpg ~ origin, data = mpg_filtered)
select(mpg, mpg:horsepower) %>%
cor()
select(mpg, mpg:horsepower) %>%
pairs()
# Scatterplot
ggplot(data=mpg, aes(x=weight,y=mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage")
# Fit the regression, print the summary results
mpg_regression <- lm(mpg ~ weight, data=mpg)
summary(mpg_regression)
# Scatterplot with fit linear regression line
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_results, truth = mpg, estimate = .pred)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
table(mpg$origin)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
# Histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg,aes(x = origin,y = mpg)) +
geom_boxplot()
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_grid(~ origin)
# Is there a difference in mileage?
mpg_filtered <- filter(mpg, origin == 'USA' | origin == 'Europe')
# Dependent variable ~ independent variable
t.test(mpg ~ origin, data = mpg_filtered)
select(mpg, mpg:horsepower) %>%
cor()
select(mpg, mpg:horsepower) %>%
pairs()
# Scatterplot
ggplot(data=mpg, aes(x=weight,y=mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage")
# Fit the regression, print the summary results
mpg_regression <- lm(mpg ~ weight, data=mpg)
summary(mpg_regression)
# Scatterplot with fit linear regression line
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
?set.seed
set.seed(1234)
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
#set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
mpg_pred <- lm_fit %>%
predict(new_data = mpg_test) %>%
bind_cols(mpg_test)
rsq(data = mpg_pred, truth = mpg, estimate = .pred)
rmse(data = mpg_pred, truth = mpg, estimate = .pred)
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(ht ~ wt, data = ais)
ais_pred <- lm_fit %>%
predict(new_data = ais_test)
ais_pred <- lm_fit %>%
predict(new_data = ais_test) %>%
bind_cols(ais_test)
rsq(data = ais_pred, truth = ht, estimate = .pred)
rmse(data = ais_pred, truth = ht, estimate = .pred)
rsq(data = ais_pred, truth = ht, estimate = .pred)
rmse(data = ais_pred, truth = ht, estimate = .pred)
# Split the data
set.seed(1234)
ais_split <- initial_split(ais)
ais_train <- training(ais_split)
ais_test <- testing(ais_split)
dim(ais_train)
dim(ais_test)
# These samples are skirting the lower side for
# representative samples, proceed with caution
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(ht ~ wt, data = ais)
ais_pred <- lm_fit %>%
predict(new_data = ais_test) %>%
bind_cols(ais_test)
rsq(data = ais_pred, truth = ht, estimate = .pred)
rmse(data = ais_pred, truth = ht, estimate = .pred)
# Split the data
set.seed(1234)
ais_split <- initial_split(ais)
ais_train <- training(ais_split)
ais_test <- testing(ais_split)
dim(ais_train)
dim(ais_test)
# These samples are skirting the lower side for
# representative samples, proceed with caution
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(ht ~ wt, data = ais)
ais_pred <- lm_fit %>%
predict(new_data = ais_test) %>%
bind_cols(ais_test)
rsq(data = ais_pred, truth = ht, estimate = .pred)
rmse(data = ais_pred, truth = ht, estimate = .pred)
# Split the data
set.seed(1234)
ais_split <- initial_split(ais)
ais_train <- training(ais_split)
ais_test <- testing(ais_split)
dim(ais_train)
dim(ais_test)
# These samples are skirting the lower side for
# representative samples, proceed with caution
# Specify what kind of model this is
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(ht ~ wt, data = ais)
ais_pred <- lm_fit %>%
predict(new_data = ais_test) %>%
bind_cols(ais_test)
rsq(data = ais_pred, truth = ht, estimate = .pred)
rmse(data = ais_pred, truth = ht, estimate = .pred)
