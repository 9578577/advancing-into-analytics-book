install.packages('leaflet')
library(leaflet)
leaflet(data = shared_cars_data[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
leaflet(data = shared_cars_data[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
data(package = leaflet)
data(package = 'leaflet')
packageVersion('leaflet')
leaflet(data = read.csv("C:/RFiles/cars")[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
leaflet(data = read.csv("C:/RFiles/cars.csv")[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
shared_cars_data <- read.csv("C:/RFiles/cars.csv")
shared_cars_data
shared_cars_data <- read.csv("C:/RFiles/cars-r.csv")
shared_cars_data
leaflet(data = shared_cars_data[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
library(shiny)
ui <- fluidPage(
titlePanel("StarWars Characters"),
sidebarLayout(
sidebarPanel(
numericInput("height", "Minimum Height:", 0, min = 1, max = 1000),
numericInput("weight", "Minimum Weight:", 0, min = 1, max = 1000),
hr(),
helpText("Data from `dplyr` package.")
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
starwars_filtered <- starwars %>%
filter(height > input$height & mass > input$weight)
ggplot(starwars_filtered, aes(x = height, y = mass, fill = gender)) +
geom_point(pch = 21, size = 5) +
theme_light() +
geom_smooth(method = "lm") +
labs(x = "Height", y = "Mass",
title = "StarWars Characters Mass vs Height Comparison",
subtitle = "Each dot represents a separate character",
caption = "Data Source: starwars (dplyr)")
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk, treadssk, schidkn)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score
star <- mutate(star, new_column = tmathssk + treadssk)
head(star)
# Sort
arrange(star, classk, treadssk)
arrange(star, desc(classk), treadssk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
districts <- read_csv('datasets/star/districts.csv')
head(districts)
# Left outer join star on districts
left_join(select(star, schidkn, tmathssk, treadssk), districts)
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star_avg_reading_sorted <- arrange(star_avg_reading, desc(avg_reading))
star_avg_reading_sorted
# Piping %>%
# Get the average reading score
# by class type, sorted high to low
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
# Average math and reading score
# for each school district
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
# Set up
star_pivot <- star %>%
select(c(schidkn, treadssk, tmathssk)) %>%
mutate(id = row_number())
star_long <- star_pivot %>%
pivot_longer(cols = c(tmathssk, treadssk),
values_to = 'score', names_to = 'test_type')
head(star_long)
# Rename tmathssk and treadssk as math and reading
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
distinct(star_long, test_type)
star_wide <- star_long %>%
pivot_wider(values_from = 'score', names_from = 'test_type')
head(star_wide)
# Count plot
ggplot(data = star,
aes(x = classk))+
geom_bar()
# Histogram
ggplot(data = star,aes(x = treadssk))+
geom_histogram()
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'blue')
# Boxplot
ggplot(data = star,aes(x = treadssk))+
geom_boxplot()
# "Flipped" boxplot
ggplot(data = star, aes(y = treadssk))+
geom_boxplot()
# Grouped boxplot
ggplot(data = star, aes(x = classk,y = treadssk))+
geom_boxplot()
# Scatterplot
ggplot(data=star,aes(x = tmathssk,y = treadssk))+
geom_point()
# Scatterplot with custom axis labels and title
ggplot(data=star,aes(x=tmathssk,y=treadssk))+
geom_point() +
xlab('Total math scaled score') + ylab('Total reading scaled score')+
ggtitle('Relationship between total math and reading scaled scores')
head(star_grouped)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk, treadssk, schidkn)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score
star <- mutate(star, new_column = tmathssk + treadssk)
head(star)
# Rename
star <- rename(star, ttl_score = new_column)
head(star)
# Sort
arrange(star, classk, treadssk)
arrange(star, desc(classk), treadssk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
my <- c(5,8,2,7)
str(my)
?arrange
1:50
1.5:2.5
1.5:3.5
1.222:2
1.222:5
1 + 1
1:50
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For writing data to Excel
library(writexl)
my_number <- 8.2
sqrt(my_number)
my_char <- 'Hello, world'
toupper(my_char)
is.vector(my_number)
length(my_number)
my_numbers <- c(5, 8, 2, 7)
is.vector(my_numbers)
str(my_numbers)
length(my_numbers)
sqrt(my_numbers)
roster_names <- c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny')
toupper(roster_names)
my_vec <- c('A', 2, 'C')
my_vec
# Get third element of roster_names vector
roster_names[3]
# Get first through third elements
roster_names[1:3]
# Get second through last elements
roster_names[2:length(roster_names)]
# Get second and fifth elements
roster_names[c(2, 5)]
roster <- data.frame(
name = c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny'),
height = c(72, 65, 68, 69, 66),
injured = c(FALSE, TRUE, FALSE, FALSE, TRUE))
roster
data()
head(iris)
is.data.frame(iris)
str(iris)
data(package = 'psych')
data('sat.act')
str(sat.act)
getwd()
file.exists('test-file.csv')
file.exists('test-folder/test-file.csv')
# This is only TRUE if you've placed the file one
# up from current folder location
file.exists('../test-file.csv')
read_csv('datasets/star/districts.csv')
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk, treadssk, schidkn)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score
star <- mutate(star, new_column = tmathssk + treadssk)
head(star)
# Rename
star <- rename(star, ttl_score = new_column)
head(star)
# Sort
arrange(star, classk, treadssk)
arrange(star, desc(classk), treadssk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
districts <- read_csv('datasets/star/districts.csv')
head(districts)
# Left outer join star on districts
left_join(select(star, schidkn, tmathssk, treadssk), districts)
1:50
?sqrt
lines(spline(xx, sqrt(abs(xx)), n=101), col = "pink")
require(stats) # for spline
require(graphics)
xx <- -9:9
plot(xx, sqrt(abs(xx)),  col = "red")
lines(spline(xx, sqrt(abs(xx)), n=101), col = "pink")
# Multiplication before addition
3 * 5 + 6
# Division before subtraction
2 / 2 - 7
1 * 2 # This comment is possible
# This comment is preferred
2 * 1
#What is the absolute value of -100?
abs(-100)
toupper('I love R')
3 > 4
my_first_object = abs(-100)
my_first_object
my_second_object
my_second_object <- sqrt(abs(-5 ^ 2))
my_second_object
my_char <- 'Hello, world'
my_other_char <- "We're able to code R!"
my_num <- 3
my_other_num <- 3.21
my_int <- 12L
my_logical <- FALSE
my_other_logical <- F
str(my_char)
str(my_num)
str(my_int)
str(my_logical)
my_num == 5.5
nchar(my_char)
my_other_num <- 2.2
my_num <- my_num/my_other_num
my_num
?arrange
library(tidyverse)
update.packages()
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For descriptive statistics
library(psych)
# For writing data to Excel
library(writexl)
my_number <- 8.2
sqrt(my_number)
my_char <- 'Hello, world'
toupper(my_char)
is.vector(my_number)
lis.vector(my_number)
length(my_number)
my_numbers <- c(5, 8, 2, 7)
is.vector(my_numbers)
str(my_numbers)
length(my_numbers)
sqrt(my_numbers)
roster_names <- c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny')
my_vec <- c('A', 2, 'C')
my_vec
str(my_vec)
roster_names[3]
roster_names[1:3]
roster_names[2:length(roster_names)]
roster_names[c(2, 5)]
roster <- data.frame(
name = c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny'),
height = c(72, 65, 68, 69, 66),
injured = c(FALSE, TRUE, FALSE, FALSE, TRUE))
roster
head(iris)
is.data.frame(iris)
str(iris)
data(package = 'psych')
data('sat.act')
str(sat.act)
read_csv('datasets/star/districts.csv')
districts <- read_csv("datasets/star/districts.csv")
a
star <- read_xlsx("datasets/star/star.xlsx")
head(star)
glimpse(star)
summary(star)
describe(star)
# Third row, second column of data frame
roster[3, 2]
# Second through fourth rows, first through third columns
roster[2:4, 1:3]
# Second and third rows only
roster[2:3,]
# First and third columns only
roster[, c(1,3)]
roster$height
is.vector(roster$height)
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
head(star)
select(star, tmathssk, treadssk, schidkn)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
star <- select(star, tmathssk:totexpk)
head(star)
head(star)
star <- mutate(star, new_column = tmathssk + treadssk)
head(star)
star <- rename(star, ttl_score = new_column)
head(star)
arrange(star, classk, treadssk)
# Sort by classk descending, treadssk ascending
arrange(star, desc(classk), treadssk)
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
# Get records where classk is small.class and
# treadssk is at least 500
filter(star, classk == 'small.class' & treadssk >= 500)
star_grouped <- group_by(star, classk)
head(star_grouped)
summarize(star_grouped, avg_math = mean(tmathssk))
star <- read_excel('datasets/star/star.xlsx')
head(star)
ead(districts)
head(districts)
left_join(select(star, schidkn, tmathssk, treadssk), districts)
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
star_pivot <- star %>%
select(c(schidkn, treadssk, tmathssk)) %>%
mutate(id = row_number())
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
values_to = 'score', names_to = 'test_type')
star_long <- star %>%
pivot_longer(cols = c(tmathssk, treadssk),
values_to = 'score', names_to = 'test_type')
head(star_long)
# Rename tmathssk and treadssk as math and reading
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
distinct(star_long, test_type)
star_wide <- star_long %>%
pivot_wider(values_from = 'score', names_from = 'test_type')
head(star_wide)
ggplot(data = star,
aes(x = classk)) +
geom_bar()
ggplot(data = star, aes(x = treadssk))+
geom_histogram()
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'blue')
ggplot(data = star, aes(x = treadssk))+
geom_boxplot()
ggplot(data = star, aes(y = treadssk))+
geom_boxplot()
ggplot(data = star, aes(x = classk, y = treadssk))+
geom_boxplot()
ggplot(data = star, aes(x = tmathssk, y = treadssk))+
geom_point()
ggplot(data = star, aes(x = tmathssk,y = treadssk))+
geom_point() +
xlab('Math score') + ylab('Reading score')+
ggtitle('Math score versus reading score')
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg, weight, horsepower, origin, cylinders)
head(mpg)
describe(mpg)
mpg %>%
count(origin)
mpg %>%
count(origin, cylinders) %>%
pivot_wider(values_from = n, names_from = cylinders)
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
ggplot(data = mpg, aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg, aes(x = origin, y = mpg)) +
geom_boxplot()
# Histogram of mpg, facted by origin
ggplot(data = mpg, aes(x = mpg)) +
geom_histogram() +
facet_grid(~ origin)
mpg_filtered <- filter(mpg, origin=='USA' | origin=='Europe')
t.test(mpg ~ origin, data = mpg_filtered)
select(mpg, mpg:horsepower) %>%
cor()
ggplot(data = mpg, aes(x = weight,y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage")
select(mpg, mpg:horsepower) %>%
pairs()
mpg_regression <- lm(mpg ~ weight, data = mpg)
summary(mpg_regression)
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
set.seed(1234)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
dim(mpg_train)
dim(mpg_test)
lm_spec <- linear_reg()
# Fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg ~ weight, data = mpg_train)
tidy(lm_fit)
glance(lm_fit)
mpg_results <- predict(lm_fit, new_data = mpg_test) %>%
bind_cols(mpg_test)
mpg_results
rsq(data = mpg_results, truth = mpg, estimate = .pred)
rmse(data = mpg_results, truth = mpg, estimate = .pred)
