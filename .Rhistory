read.csv("C:/RFiles/university.data")
write.csv(university, "C:/RFiles/university.csv")
university <- read.csv("C:/RFiles/university.data")
write.csv(university, "C:/RFiles/university.csv")
View(university)
install.packages("tidyverse", dependencies = TRUE)
library(stringr)
?str_split
head(university)
colnames(university) <- c("col")
university <- read.csv("C:/RFiles/university.data")
colnames(university) <- c("col")
head(university)
library(tidyverse)
View(university)
str_split(university$col, "(state")
library(tidyverse)
str_split(university$col, "(state")
str_split(university$col, "state")
View(x)
x <- str_split(university$col, "state")
View(x)
ecommerce <- read.csv("C:/RFiles/data.csv")
View(ecommerce)
library(Ecdat)
install.packages("Ecdat")
library(Ecdat)
library(Ecdat)
dim(Housing)
help('plot')
?plot
?plot
?plot
help(plott)
help(plot)
plot(Speed, Distance,
panel.first = lines(stats::lowess(Speed, Distance), lty = "dashed"),
pch = 0, cex = 1.2, col = "blue")
Speed <- cars$speed
Distance <- cars$dist
plot(Speed, Distance, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue")
plot(Speed, Distance,
panel.first = lines(stats::lowess(Speed, Distance), lty = "dashed"),
pch = 0, cex = 1.2, col = "blue")
?qplot
?barplot
## 3rd form of formula - 2 categories :
op <- par(mfrow = 2:1, mgp = c(3,1,0)/2, mar = .1+c(3,3:1))
summary(d.Titanic <- as.data.frame(Titanic))
barplot(Freq ~ Class + Survived, data = d.Titanic,
subset = Age == "Adult" & Sex == "Male",
main = "barplot(Freq ~ Class + Survived, *)", ylab = "# {passengers}", legend = TRUE)
# Corresponding table :
(xt <- xtabs(Freq ~ Survived + Class + Sex, d.Titanic, subset = Age=="Adult"))
# Alternatively, a mosaic plot :
mosaicplot(xt[,,"Male"], main = "mosaicplot(Freq ~ Class + Survived, *)", color=TRUE)
par(op)
housing <- read.csv("C:/RFiles/housing.csv")
ecommerce <- read.csv("C:/Rfiles/ecommerce.csv")
?hist
?boxplot
?barplot
?plot
?hit
?hist
op <- par(mfrow = c(2, 2))
hist(islands)
utils::str(hist(islands, col = "gray", labels = TRUE))
?barplot
barplot(GNP ~ Year, data = longley)
barplot(cbind(Employed, Unemployed) ~ Year, data = longley)
## 3rd form of formula - 2 categories :
op <- par(mfrow = 2:1, mgp = c(3,1,0)/2, mar = .1+c(3,3:1))
summary(d.Titanic <- as.data.frame(Titanic))
barplot(Freq ~ Class + Survived, data = d.Titanic,
subset = Age == "Adult" & Sex == "Male",
main = "barplot(Freq ~ Class + Survived, *)", ylab = "# {passengers}", legend = TRUE)
# Corresponding table :
(xt <- xtabs(Freq ~ Survived + Class + Sex, d.Titanic, subset = Age=="Adult"))
# Alternatively, a mosaic plot :
mosaicplot(xt[,,"Male"], main = "mosaicplot(Freq ~ Class + Survived, *)", color=TRUE)
par(op)
# Formula method
barplot(GNP ~ Year, data = longley)
barplot(cbind(Employed, Unemployed) ~ Year, data = longley)
## 3rd form of formula - 2 categories :
op <- par(mfrow = 2:1, mgp = c(3,1,0)/2, mar = .1+c(3,3:1))
summary(d.Titanic <- as.data.frame(Titanic))
barplot(Freq ~ Class + Survived, data = d.Titanic,
subset = Age == "Adult" & Sex == "Male",
main = "barplot(Freq ~ Class + Survived, *)", ylab = "# {passengers}", legend = TRUE)
# Corresponding table :
(xt <- xtabs(Freq ~ Survived + Class + Sex, d.Titanic, subset = Age=="Adult"))
# Alternatively, a mosaic plot :
mosaicplot(xt[,,"Male"], main = "mosaicplot(Freq ~ Class + Survived, *)", color=TRUE)
par(op)
# Formula method
barplot(GNP ~ Year, data = longley)
barplot(cbind(Employed, Unemployed) ~ Year, data = longley)
## 3rd form of formula - 2 categories :
op <- par(mfrow = 2:1, mgp = c(3,1,0)/2, mar = .1+c(3,3:1))
summary(d.Titanic <- as.data.frame(Titanic))
barplot(Freq ~ Class + Survived, data = d.Titanic,
subset = Age == "Adult" & Sex == "Male",
main = "barplot(Freq ~ Class + Survived, *)", ylab = "# {passengers}", legend = TRUE)
# Corresponding table :
(xt <- xtabs(Freq ~ Survived + Class + Sex, d.Titanic, subset = Age=="Adult"))
# Alternatively, a mosaic plot :
mosaicplot(xt[,,"Male"], main = "mosaicplot(Freq ~ Class + Survived, *)", color=TRUE)
par(op)
library(Ecdat)
head(Housing)
head(Star)
install.packages("tidyverse")
a
library(tidyverse)
data(iris)
head(iris)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
Y
Y
data(package='Ecdat')
View(Fishing)
library(Ecdat)
View(Fishing)
View(Clothing)
View(Computers)
View(Fatality)
View(Males)
View(OFP)
View(Workinghours)
View(Wages)
head(Schooling)
source('~/GitHub/gh-advancing-into-analytics/drafts-in-progress/chapter-08-r-for-data-analysis/r-wrangling-dataviz-star.R', echo=TRUE)
head(ManufCost)
head(Fair)
head(Bwages)
head(Males)
head(Consumption)
head(Heating)
head(LaborSupply)
head(Produc)
data()
airquality
ToothGrowth
mtcars
sunspots
women
chickwts
cars
PlantGrowth
ability.cov
airmiles
attenu
# read the dataset into a data frame
abalone <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header=FALSE)
# add column names
names(abalone) <- c("sex", "length", "diameter", "height", "weight.whole",
"weight.shucked", "weight.viscera", "weight.shell", "rings")
head(abalone)
library(rattle.data)
install.packages('rattle.data')
wine
library(rattle.data)
wine
head(abalone)
table(abalone$ringx)
table(abalone$rings)
hist(abalone$rings)
library(dplyr)
1 * 2
1 * 2 # This comment is possible
# This comment is preferred
2 * 1
# For reading in csv files
library(readr)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For reading in csv files
library(readr)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
setwd("~/GitHub/advancing-into-analytics-book")
# Import packages that we need
library(tidyverse)
library(psych)
# Read in the data, select only the columns we need
mpg <- read_csv("mpg.csv") %>% select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
-
# One-way frequency table of origin
table(mpg$origin)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>% select(mpg,origin) %>% describeBy(group='origin')
# Import packages that we need
library(tidyverse)
library(psych)
# Read in the data, select only the columns we need
mpg <- read_csv("mpg.csv") %>% select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
table(mpg$origin)
# # One-way frequency table
# mpg %>%
#   group_by(origin) %>%
#   summarise(n=n())
# # Two-way frequency table
# mpg %>%
#   group_by(origin,cylinders) %>%
#   summarise(n=n()) %>%
#   spread(cylinders,n)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>% select(mpg,origin) %>% describeBy(group='origin')
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Read in the data, select only the columns we need
mpg <- read_csv("mpg.csv") %>% select(mpg,weight,horsepower,origin,cylinders)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>% select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
table(mpg$origin)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
# Descriptive statistics by group
mpg %>% select(mpg,origin) %>% describeBy(group='origin')
# Descriptive statistics by group
mpg %>% select(mpg,origin) %>% describeBy(group='origin')
# Descriptive statistics
describe(mpg)
ggplot(data = mpg, aes(x = weight, y = mpg)) +
geom_point() + xlab("weight (pounds)") +
ylab("mileage (mpg)") + ggtitle("Relationship between weight and mileage") +
geom_smooth(method = lm)
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk,treadssk,schidkn)
star_selected <- select(star, tmathssk,treadssk,schidkn)
head(star_selected)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score, months of experience
mutate(star, score_ttl = tmathssk+treadssk, months_exp = totexpk*12)
# Rename tmathssk and treadssk as
# math_score and reading_score, respectively
rename(star, math_score=tmathssk, reading_score=treadssk)
# Sort
arrange(star, classk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
group_by(star, classk)
head(star_grouped)
star_grouped <- group_by(star, classk)
head(star_grouped)
# Aggregate
summarize(star_grouped, avg_math = mean(tmathssk))
?summarise
summarize(star_grouped, sum_math = sum(tmathssk))
?summarise
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
# Read in our data sets
districts <- read_excel("datasets/star/district-names.xlsx")
head(star)
head(districts)
districts <- read_excel("datasets/star/district-names.xlsx")
head(districts)
# Left outer join star on districts
left_join(star, districts)
districts <- read_excel("datasets/star/district-names.xlsx")
head(districts)
star
star <- read_excel("datasets/star/star.xlsx")
head(star)
districts <- read_excel("datasets/star/district-names.xlsx")
head(districts)
# Left outer join star on districts
left_join(star, districts)
# Average math and reading score
# for each school district
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star_avg_reading_sorted <- arrange(star_avg_reading, desc(avg_reading))
star_avg_reading_sorted
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
# Average math and reading score
# for each school district
star %>%
group_by(schidkn) %>%
summarise(avg_read = mean(treadssk), avg_math = mean(tmathssk)) %>%
arrange(schidkn) %>%
head()
?ggplot
# Scatterplot
ggplot(data=star,aes(x=tmathssk,y=treadssk))+
geom_point()
# Histogram
ggplot(data=star,aes(x=treadssk))+
geom_histogram()
?geom_histogram
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 24)
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, col = 'red')
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'red')
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'black')
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'green')
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'blue')
ggplot(data = star, aes(x = treadssk, fill = 'blue'))+
geom_histogram(bins = 25)
ggplot(data = star, aes(x = treadssk, fill = 'blue'))+
geom_histogram(bins = 25)
ggplot(data = star, aes(x = treadssk, fill = 'red'))+
geom_histogram(bins = 25)
ggplot(data = star, aes(x = treadssk))+
geom_histogram(bins = 25, fill = 'blue')
# "Flipped" boxplot
ggplot(data = star, aes(y = treadssk))+
geom_boxplot()
# Boxplot
ggplot(data=star,aes(x=treadssk))+
geom_boxplot()
# "Flipped" boxplot
ggplot(data = star, aes(y = treadssk))+
geom_boxplot()
library(readxl)
star <- read_xlsx('datasets/star/star.xlsx')
str(star)
?str
str(iris)
data()
ChickWeight
airmiles
chickwts
str(iris)
str(iris)
?factor
getwd()
getwd()
