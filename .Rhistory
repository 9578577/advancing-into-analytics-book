names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading')) %>%
mutate(row )
star_long
library(dplyr)
star_wide %>%
group_by(classk, schidkn) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = test_type, values_from = score) %>%
select(-row)
star_wide %>%
group_by(classk, schidkn) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('classk', 'schidkn', 'treadssk', 'tmathssk'))
# https://rstudio-conf-2020.github.io/r-for-excel/tidying.html#tidyrpivot_longer-to-reshape-from-wider-to-longer-format
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading')) %>%
mutate(row )
star_long
library(dplyr)
star_wide %>%
group_by(classk, schidkn) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('classk', 'schidkn', 'treadssk', 'tmathssk'))
# https://rstudio-conf-2020.github.io/r-for-excel/tidying.html#tidyrpivot_longer-to-reshape-from-wider-to-longer-format
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading')) %>%
mutate(row )
star_long
library(dplyr)
star_long %>%
group_by(classk, schidkn) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
d
d %>%
mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = name, values_from = val) %>%
select(-row)
d %>%
group_by(name) %>%
mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = name, values_from = val) %>%
select(-row)
star_long %>%
mutate(row = row_number()) %>%
group_by(classk, schidkn) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long %>%
mutate(row = row_number()) %>%
group_by(classk, schidkn) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading')) %>%
mutate(row )
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading')) %>%
mutate(row)
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('classk', 'schidkn', 'treadssk', 'tmathssk'))
# https://rstudio-conf-2020.github.io/r-for-excel/tidying.html#tidyrpivot_longer-to-reshape-from-wider-to-longer-format
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading')) %>%
mutate(row)
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
star_long %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long %>%
pivot_wider(names_from = 'test_type', values_from = 'score')
star_long %>%
group_by(schidkn, classk) %>%
mutate(row = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long %>%
group_by(schidkn, classk) %>%
mutate(row = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_long %>%
group_by(schidkn, classk) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('classk', 'schidkn', 'treadssk', 'tmathssk'))
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'treadssk', 'tmathssk'))
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
star_long <- mutate(star_long, row = row_number())
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'treadssk', 'tmathssk'))
# https://rstudio-conf-2020.github.io/r-for-excel/tidying.html#tidyrpivot_longer-to-reshape-from-wider-to-longer-format
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
# https://github.com/tidyverse/tidyr/issues/599
star_long <- mutate(star_long, row = row_number())
star_long
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, row = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star_long
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
# Pivot by year, state and population
pivot_wider(data = census, names_from = 'year', values_from = 'population')
library(tidyverse)
library(readxl)
library(writexl)
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
divisions <- read_csv('../datasets/census/census-divisions.csv')
glimpse(divisions)
# Merge the datasets first
census <- left_join(census, divisions)
head(census)
# Sort the data by region ascending, division ascending and population descending.
# (You will need to combine datasets to do this.)
# Write the results to an Excel worksheet.
census %>%
arrange(region, division, desc(population)) %>%
write_xlsx("../datasets/census/solutions-data/census-sorted.xlsx")
# Drop the postal_code field from your merged dataset.
census <- select(census, -postal_code)
head(census)
# Create a new column _density_ which is a calculation
# of population divided by land area.
census <- mutate(census, density = population/land_area)
head(census)
# Visualize the relationship between land area and population
# for all observations in 2015.
census_2015 <- filter(census, year == 2015)
ggplot(data = census_2015, aes(x = land_area, y = population))+
geom_point()
# NOTE: It's possible to use `ggplot()` in the pipe...
census %>%
filter(year == 2015) %>%
ggplot(aes(x = land_area, y = population)) + geom_point()
# Check out our large land areas...
census_2015 %>% arrange(desc(land_area))
# Find the total population for each region in 2015.
census_2015 %>%
group_by(region) %>%
summarise(ttl_population = sum(population))
library(tidyverse)
library(readxl)
library(writexl)
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
setwd("~/GitHub/advancing-into-analytics-book/exercise-solutions")
library(tidyverse)
library(readxl)
library(writexl)
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
divisions <- read_csv('../datasets/census/census-divisions.csv')
glimpse(divisions)
# Merge the datasets first
census <- left_join(census, divisions)
head(census)
census %>%
arrange(region, division, desc(population)) %>%
write_xlsx("../datasets/census/solutions-data/census-sorted.xlsx")
# Drop the postal_code field from your merged dataset.
census <- select(census, -postal_code)
head(census)
# Create a new column _density_ which is a calculation
# of population divided by land area.
census <- mutate(census, density = population/land_area)
head(census)
# Visualize the relationship between land area and population
# for all observations in 2015.
census_2015 <- filter(census, year == 2015)
ggplot(data = census_2015, aes(x = land_area, y = population))+
geom_point()
# NOTE: It's possible to use `ggplot()` in the pipe...
census %>%
filter(year == 2015) %>%
ggplot(aes(x = land_area, y = population)) + geom_point()
# Check out our large land areas...
census_2015 %>% arrange(desc(land_area))
# Find the total population for each region in 2015.
census_2015 %>%
group_by(region) %>%
summarise(ttl_population = sum(population))
# Pivot by year, state and population
pivot_wider(data = census, names_from = 'year', values_from = 'population')
# Pivot by year, state and population
# First, add an ID row
census <- mutate(census, id = row_number())
pivot_wider(data = census, names_from = 'year', values_from = 'population')
# Pivot by year, state and population
# First, add an ID row
census <- mutate(census, id = row_number())
census
# Pivot by year, state and population
# First, add an ID row
census
library(tidyverse)
library(readxl)
library(writexl)
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
divisions <- read_csv('../datasets/census/census-divisions.csv')
glimpse(divisions)
# Merge the datasets first
census <- left_join(census, divisions)
head(census)
# Sort the data by region ascending, division ascending and population descending.
# (You will need to combine datasets to do this.)
# Write the results to an Excel worksheet.
census %>%
arrange(region, division, desc(population)) %>%
write_xlsx("../datasets/census/solutions-data/census-sorted.xlsx")
# Drop the postal_code field from your merged dataset.
census <- select(census, -postal_code)
head(census)
# Create a new column _density_ which is a calculation
# of population divided by land area.
census <- mutate(census, density = population/land_area)
head(census)
# Visualize the relationship between land area and population
# for all observations in 2015.
census_2015 <- filter(census, year == 2015)
ggplot(data = census_2015, aes(x = land_area, y = population))+
geom_point()
# NOTE: It's possible to use `ggplot()` in the pipe...
census %>%
filter(year == 2015) %>%
ggplot(aes(x = land_area, y = population)) + geom_point()
# Check out our large land areas...
census_2015 %>% arrange(desc(land_area))
# Find the total population for each region in 2015.
census_2015 %>%
group_by(region) %>%
summarise(ttl_population = sum(population))
census
# Pivot by year, state and population
# First, add an ID row
pivot_wider(data = census, names_from = 'year', values_from = 'population')
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
divisions <- read_csv('../datasets/census/census-divisions.csv')
glimpse(divisions)
# Merge the datasets first
census <- left_join(census, divisions)
head(census)
# Sort the data by region ascending, division ascending and population descending.
# (You will need to combine datasets to do this.)
# Write the results to an Excel worksheet.
census %>%
arrange(region, division, desc(population)) %>%
write_xlsx("../datasets/census/solutions-data/census-sorted.xlsx")
# Drop the postal_code field from your merged dataset.
census <- select(census, -postal_code)
head(census)
# Create a new column _density_ which is a calculation
# of population divided by land area.
census <- mutate(census, density = population/land_area)
head(census)
# Visualize the relationship between land area and population
# for all observations in 2015.
census_2015 <- filter(census, year == 2015)
ggplot(data = census_2015, aes(x = land_area, y = population))+
geom_point()
# NOTE: It's possible to use `ggplot()` in the pipe...
census %>%
filter(year == 2015) %>%
ggplot(aes(x = land_area, y = population)) + geom_point()
# Check out our large land areas...
census_2015 %>% arrange(desc(land_area))
# Find the total population for each region in 2015.
census_2015 %>%
group_by(region) %>%
summarise(ttl_population = sum(population))
# Pivot by year, state and population
# First, add an ID row
pivot_wider(data = select(census, c('state','year','population'), names_from = 'year', values_from = 'population')
# Pivot by year, state and population
# First, add an ID row
pivot_wider(data = select(census, c('state','year','population')),
names_from = 'year', values_from = 'population')
pivot_wider(data = select(census, c('state','year','population')),
names_from = 'year', values_from = 'population')
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'treadssk', 'tmathssk'))
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_long
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
# https://rstudio-conf-2020.github.io/r-for-excel/tidying.html#tidyrpivot_longer-to-reshape-from-wider-to-longer-format
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
# https://github.com/tidyverse/tidyr/issues/599
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
star_long %>%
group_by(schidkn, classk) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
star <- read_excel('datasets/star/star.xlsx')
setwd("~/GitHub/advancing-into-analytics-book")
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
star_long %>%
group_by(schidkn, classk) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
star_wide
star_long %>%
group_by(schidkn, classk) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = 'test_type', values_from = 'score') %>%
select(-row)
library(tidyverse)
library(readxl)
star <- read_excel('datasets/star/star.xlsx')
star <- select(star, c('schidkn', 'classk', 'treadssk', 'tmathssk'))
star <- mutate(star, id = row_number())
star_long <- pivot_longer(data = star,
cols = 'tmathssk':'treadssk',
names_to = 'test_type', values_to = 'score')
# https://rstudio-conf-2020.github.io/r-for-excel/tidying.html#tidyrpivot_longer-to-reshape-from-wider-to-longer-format
# https://stackoverflow.com/questions/38088328/how-to-recode-and-reverse-code-variables-in-columns-with-dplyr
star_long <- star_long %>%
mutate(test_type = recode(test_type,
'tmathssk' = 'math', 'treadssk' = 'reading'))
star_long
library(dplyr)
# https://github.com/tidyverse/tidyr/issues/599
star_wide <- pivot_wider(data = star_long,
names_from = 'test_type',
values_from = 'score')
star_wide
pivot_wider(data = select(census, c('state','year','population')),
names_from = 'year', values_from = 'population')
