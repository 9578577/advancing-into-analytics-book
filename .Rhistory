# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
mpg %>%
count(origin)
?count
# One-way frequency table of origin
mpg %>%
count(origin)
mpg %>%
count(origin, cylinders)
mpg %>%
count(origin, cylinders) %>%
pivot_wider(values_from = n, names_from = cylinders)
# Two-way frequency table
table(mpg$origin, mpg$cylinders)
mpg %>%
count(origin, cylinders) %>%
pivot_wider(values_from = n, names_from = cylinders)
library(tidyverse)
library(readxl)
library(writexl)
census <- read_csv('../datasets/census/census.csv')
glimpse(census)
divisions <- read_csv('../datasets/census/census-divisions.csv')
glimpse(divisions)
# 0. Merge the datasets first
census <- left_join(census, divisions)
head(census)
# 1. Sort the data by region ascending, division ascending and population descending.
# (You will need to combine datasets to do this.)
# Write the results to an Excel worksheet.
census %>%
arrange(region, division, desc(population)) %>%
write_xlsx("../datasets/census/solutions-data/census-sorted.xlsx")
# 2. Drop the postal_code field from your merged dataset.
census <- select(census, -postal_code)
head(census)
# 3. Create a new column _density_ which is a calculation
# of population divided by land area.
census <- mutate(census, density = population/land_area)
head(census)
# 4. Visualize the relationship between land area and population
# for all observations in 2015.
census_2015 <- filter(census, year == 2015)
ggplot(data = census_2015, aes(x = land_area, y = population))+
geom_point()
?apply
?sapply
?lapply
?apply
?map
library(tidyverse)
?map
#install.packages('DAAG')
library(DAAG)
library(tidyverse)
#install.packages('tidymodels')
library(tidymodels)
head(ais)
# 1. Visualize rcc by sex
ggplot(data = ais, aes(x = sex, y = rcc))+
geom_boxplot()
ggplot(data = ais, aes(x = rcc))+
geom_histogram()+
facet_grid(~ sex)
# 2. Significant difference in red blood cell count?
t.test(rcc ~ sex, data=ais)
# Yes, there is a significant difference in red blood cell counts
# 3. Correlation matrix of relevant variables:
ais %>%
select(-c(sex, sport)) %>%
cor()
# Lots of these to plot; you may
# want to pick just the ones of interest
ais %>%
select(-c(sex, sport)) %>%
pairs()
# 4. Visualize relationship of height on weight:
ggplot(data = ais, aes(x = ht,y = wt))+
geom_point()
# 5. Linear regression of height on weight:
ais_reg <- lm(wt ~ ht, data = ais)
summary(ais_reg)
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk,treadssk,schidkn)
star_selected <- select(star, tmathssk,treadssk,schidkn)
head(star_selected)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score, months of experience
mutate(star, score_ttl = tmathssk+treadssk, months_exp = totexpk*12)
# Rename tmathssk and treadssk as
# math_score and reading_score, respectively
rename(star, math_score=tmathssk, reading_score=treadssk)
# Sort
arrange(star, classk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
ungroup(summarize(star_grouped, avg_math = mean(tmathssk)))
summarize(ungroup(star_grouped), avg_math = mean(tmathssk))
summarize(ungroup(star_grouped), avg_math = mean(tmathssk))
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
summarize(ungroup(star_grouped), avg_math = mean(tmathssk))
ungroup(summarize(star_grouped, avg_math = mean(tmathssk)))
ungroup(summarize(star_grouped, avg_math = mean(tmathssk)))
library(tidyverse)
library(readxl)
star <- read_excel("datasets/star/star.xlsx")
head(star)
# Select given columns from star
select(star, tmathssk,treadssk,schidkn)
star_selected <- select(star, tmathssk,treadssk,schidkn)
head(star_selected)
select(star, -tmathssk, -treadssk, -schidkn)
select(star, -c(tmathssk, treadssk, schidkn))
# Select all columns between tmathssk and totexpk;
# Re-assign results back to star
star <- select(star, tmathssk:totexpk)
head(star)
# Calculate total score, months of experience
mutate(star, score_ttl = tmathssk+treadssk, months_exp = totexpk*12)
# Rename tmathssk and treadssk as
# math_score and reading_score, respectively
rename(star, math_score=tmathssk, reading_score=treadssk)
# Sort
arrange(star, classk)
# Filter
filter(star, classk == 'small.class')
filter(star, treadssk >= 500)
filter(star, classk == 'small.class' & treadssk >= 500)
# Group by
star_grouped <- group_by(star, classk)
head(star_grouped)
# Average math score by class size
summarize(star_grouped, avg_math = mean(tmathssk))
?summarise
# Read in our data sets
star <- read_excel('datasets/star/star.xlsx')
head(star)
districts <- read_csv('datasets/star/districts.csv')
head(districts)
# Left outer join star on districts
left_join(select(star, schidkn, tmathssk, treadssk), districts)
star_grouped <- group_by(star, classk)
star_avg_reading <- summarize(star_grouped, avg_reading = mean(treadssk))
star_avg_reading_sorted <- arrange(star_avg_reading, desc(avg_reading))
star_avg_reading_sorted
# Piping %>%
# Get the average reading score
# by class type, sorted high to low
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading)) %>%
ungroup()
star %>%
group_by(classk) %>%
ungroup() %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
ungroup() %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
ungroup() %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading)) %>%
ungroup()
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading)) %>%
ungroup()
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading)) %>%
ungroup()
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading)) %>%
ungroup()
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
x <- star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
x
is.tibble(x)
x <- star %>%
group_by(classk) %>%
summarise(avg_reading = mean(treadssk)) %>%
arrange(desc(avg_reading))
is_tibble(x)
is_grouped_df(x)
x <- star %>%
group_by(classk)
is_grouped_df(x)
# Import packages that we need
library(tidyverse)
library(psych)
library(tidymodels)
# Read in the data, select only the columns we need
mpg <- read_csv("datasets/mpg/mpg.csv") %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
# Descriptive statistics
describe(mpg)
# One-way frequency table of origin
mpg %>%
count(origin)
# Two-way frequency table
mpg %>%
count(origin, cylinders) %>%
pivot_wider(values_from = n, names_from = cylinders)
# Descriptive statistics by group
mpg %>%
select(mpg, origin) %>%
describeBy(group = 'origin')
# Histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()
# Box plot
ggplot(data = mpg,aes(x = origin,y = mpg)) +
geom_boxplot()
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_grid(~ origin)
# Facet histogram
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_wrap(~ origin)
ggplot(data = mpg,aes(x = mpg)) +
geom_histogram()+
facet_wrap(~ origin)
library(ShinyBaseball)
install.packages('ShinyBaseball')
library(remotes)
install_github("bayesball/ShinyBaseball")
BrushingZone()
library(ShinyBaseball)
install_github("bayesball/ShinyBaseball")
remove.packages('rlang')
library(ShinyBaseball)
install_github("bayesball/ShinyBaseball")
library(ggplot2)
library(dplyr)
data("starwars")
install.packages('rlang')
library(ShinyBaseball)
install_github("bayesball/ShinyBaseball")
library(remotes)
install_github("bayesball/ShinyBaseball")
library(ShinyBaseball)
BrushingZone()
install.packages('shinythemes')
BrushingZone()
library(ggplot2)
library(dplyr)
data("starwars")
p1 <- table(starwars$hair_color) %>%
as.data.frame() %>%
ggplot(aes(x=Var1, y = Freq)) + geom_bar(stat="identity")
p2 <- barplot(table(starwars$hair_color))
ggplot(starwars, aes(x = height, y = mass, fill = gender)) +
geom_point(pch = 21, size = 5) +
theme_light() +
geom_smooth(method = "lm") +
labs(x = "Height", y = "Mass",
title = "StarWars Characters Mass vs Height Comparison",
subtitle = "Each dot represents a separate character",
caption = "Data Source: starwars (dplyr)")
library(leaflet)
install.packages('leafet')
library(leaflet)
library(leaflet)
install.packages('leaflet')
library(leaflet)
leaflet(data = shared_cars_data[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
leaflet(data = shared_cars_data[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
data(package = leaflet)
data(package = 'leaflet')
packageVersion('leaflet')
leaflet(data = read.csv("C:/RFiles/cars")[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
leaflet(data = read.csv("C:/RFiles/cars.csv")[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
shared_cars_data <- read.csv("C:/RFiles/cars.csv")
shared_cars_data
shared_cars_data <- read.csv("C:/RFiles/cars-r.csv")
shared_cars_data
leaflet(data = shared_cars_data[1:20, ]) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude)
library(shiny)
ui <- fluidPage(
titlePanel("StarWars Characters"),
sidebarLayout(
sidebarPanel(
numericInput("height", "Minimum Height:", 0, min = 1, max = 1000),
numericInput("weight", "Minimum Weight:", 0, min = 1, max = 1000),
hr(),
helpText("Data from `dplyr` package.")
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
starwars_filtered <- starwars %>%
filter(height > input$height & mass > input$weight)
ggplot(starwars_filtered, aes(x = height, y = mass, fill = gender)) +
geom_point(pch = 21, size = 5) +
theme_light() +
geom_smooth(method = "lm") +
labs(x = "Height", y = "Mass",
title = "StarWars Characters Mass vs Height Comparison",
subtitle = "Each dot represents a separate character",
caption = "Data Source: starwars (dplyr)")
})
}
shinyApp(ui = ui, server = server)
